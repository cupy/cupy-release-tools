ARG base_image
FROM ${base_image}

USER root
RUN [ ! -d /opt/rocm ] || ( curl -qL https://repo.radeon.com/rocm/rocm.gpg.key | apt-key add - )

# Update CUDA GPG key
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub || echo "Skip updating GPG key"

RUN export DEBIAN_FRONTEND=noninteractive && \
    apt-get -y update && \
    apt-get -y install gcc g++ make patch git && \
    apt-get -y install libbz2-dev liblzma-dev libssl-dev libreadline-dev libffi-dev && \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*

# Install pyenv requirements.
# https://github.com/pyenv/pyenv/wiki/Common-build-problems#requirements
RUN export DEBIAN_FRONTEND=noninteractive && \
    apt-get -y update && \
    apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
    libncursesw5-dev xz-utils tk-dev && \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*

# Install Python.
ARG python_versions
RUN git clone https://github.com/pyenv/pyenv.git /opt/pyenv
ENV PYENV_ROOT=/opt/pyenv
ENV PATH ${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${PATH}
RUN for VERSION in ${python_versions}; do \
      echo "Installing Python ${VERSION}..." && \
      pyenv install ${VERSION} & \
    done && \
    wait

# Install Python libraries.
# The last version installed will be used to run the verifier agent.
# Pin to NumPy v2.2.6 as NumPy v2.3+ wheels require glibc-2.28 where Ubuntu 18.04 uses glibc-2.27.
RUN for VERSION in ${python_versions}; do \
      echo "Installing libraries on Python ${VERSION}..." && \
      pyenv global ${VERSION} && \
      pip install -U pip setuptools && \
      pip install pytest mock; \
      pip install "numpy==2.2.6" "scipy==1.15.3"; \
    done

# Install additional dependencies.
ARG system_packages
RUN [ -z "${system_packages}" ] || ( \
        export DEBIAN_FRONTEND=noninteractive && \
        apt-get -y update && \
        apt-get -y install ${system_packages} && \
        rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* \
    )

# Use /tmp as a temporary home to install package.
ENV HOME /tmp

# For ROCm 4.3+ (shared libraries are not added to /etc/ld.so.conf.d)
ENV LD_LIBRARY_PATH="/opt/rocm/lib:${LD_LIBRARY_PATH}"

# Workaround for bug specific in ROCm 4.3 (https://github.com/cupy/cupy/issues/6605)
ENV LLVM_PATH="/opt/rocm/llvm"

COPY setup_cuda_runtime_headers.py /
COPY agent.py /
ENTRYPOINT ["/agent.py"]
